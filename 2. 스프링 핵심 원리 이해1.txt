- 스프링 부트 스타터 사이트로 이동해서 스프링프로젝트생성
https://start.spring.io

- 생성 방법
   - 프로젝트 선택
      - Project: Gradle Project
      - Spring Boot: 2.3.x
      - Language: Java
      - Packaging: Jar
      - Java: 11
   - Project Metadata
      - groupId: hello
      - artifactId: core
   - Dependencies: 선택하지 않는다.

- 동작 확인 방법
   - 기본 메인 클래스 실행( CoreApplication.main() )
    
- IntelliJ Gradle 대신에 자바 직접 실행
   - 최근 IntelliJ 버전은 Gradle을 통해서 실행 하는 것이 기본 설정이다. 이렇게 하면 실행속도가 느리다. 
   - 다음과 같이 변경하면 자바로 바로 실행해서 실행속도가 더 빠르다.

   - Preferences(Settings) -> Build, Execution, Deployment -> Build Tools -> Gradle
      - Build and run using: Gradle IntelliJ IDEA
      - Run tests using: Gradle IntelliJ IDEA

1. 비즈니스 요구사항과 설계
   - 회원
      - 회원을 가입하고 조회할 수 있다.
      - 회원은 일반과 VIP 두 가지 등급이 있다.
      - 회원 데이터는 자체 DB를 구축할 수 있고, 외부 시스템과 연동할 수 있다. (미확정)
   - 주문과 할인 정책
       - 회원은 상품을 주문할 수 있다.
       - 회원 등급에 따라 할인 정책을 적용할 수 있다.
       - 할인 정책은 모든 VIP는 1000원을 할인해주는 고정 금액 할인을 적용해달라. (나중에 변경 될 수 있다.)
       - 할인 정책은 변경 가능성이 높다. 회사의 기본 할인 정책을 아직 정하지 못했고, 오픈 직전까지 고민을 미루고 싶다. 
         최악의 경우 할인을 적용하지 않을 수 도 있다. (미확정)

   - 요구사항을 보면 회원 데이터, 할인 정책 같은 부분은 지금 결정하기 어려운 부분이다. 그렇다고 이런 정책이
     결정될 때 까지 개발을 무기한 기다릴 수 도 없다. 우리는 앞에서 배운 객체 지향 설계 방법이 있다.

   - 인터페이스를 만들고 구현체를 언제든지 갈아끼울 수 있도록 설계하면 된다. 

   - 참고: 프로젝트 환경설정을 편리하게 하려고 스프링 부트를 사용한 것이다. 지금은 스프링 없는 순수한
           자바로만 개발을 진행한다는 점을 꼭 기억하자!
      
2. 회원 도메인 설계.
   - 회원 도메인 요구사항
      - 회원을 가입하고 조회할 수 있다.
      - 회원은 일반과 VIP 두 가지 등급이 있다.
      - 회원 데이터는 자체 DB를 구축할 수도 있고, 외부 시스템과 연동할 수도 있다.


   - 회원 도메인 협력 관계 설계
   - 기획자도 볼 수 있는 다이어그램


   사진1


   - 회원 데이터는 자체 DB를 구축할 수도 있고, 외부 시스템과 연동할 수도 있다고 했으므로
     회원 데이터에 접근하는 계층을 따로만든다 그렇게 해서 회원 저장소라는 인터페이스를 만든다
     회원 저장소 역할의 구현을 위에 3가지로 나눠서 구현체를 선택하면 되게끔 역할과 구현을 분리한다. 


   - 회원 클래스 다이어 그램 설계
   - 개발자가 구체화하여 만듦
   - 클래스 다이어그램은 실제 서버를 실행하지 않는 상황에서 클래스들을 파악하기 쉽다.


   사진2


   - 회원 객체 다이어그램 설계
   - 실제 서버 실행 시, 동적으로 결정되는 구현체들을 파악하기 쉬움


   사진3


   객체간 메모리들의 참조들이 어떻게 되는지 그린 것
   결과적으론 이 그림을 만들어 볼 것이다.

   회원 서비스는 MemberServiceImpl 이다.

3. 이제 회원 도메인을 개발해보자 


   - 회원 엔티티 


   - 회원 등급
      

      코드1


   - enum은 무엇일까?
      - enum(열거형)은 "Enumeration"의 약자임.
      - 관련이 있는 상수들의 집합이다. 어떤 클래스가 상수만으로 작성되어 있으면
        반드시 Class로 선언할 필요는 없다. 이럴 때 Class로 선언된 부분에
        enum이라고 선언하면 이 객체는 상수의 집합이다 라는 것을 명시적으로 나타내줌.
        또한 조건으로 넘어온 데이터 타입을 알고 있기때문에 각각의 레이블에서
        enum의 데이터 타입을 생략하고 상수만 입력할 수 있다.
      
      - enum을 사용하는 이유는?
         - 코드가 단순해지고 가독성이 좋음.
         - 인스턴스 생성과 상속을 방지.
         - 구현의 의도가 열거임을 분명하게 나타내줌. 


   - 회원 엔티티


      코드2


   - 회원 저장소 


   - 회원 저장소 인터페이스

   
   코드3


   - 메모리 회원 저장소 구현체


   코드4


   - 데이터베이스가 아직 확정이 안되었다. 그래도 개발은 진행해야 하니
     가장 단순한 메모리 회원 저장소를 구현해서 우선 개발을 진행.
   - 참고: HashMap은 동시성 이슈가 발생할 수 있다. 이런 경우 ConcurrentHashMap을 사용하자.


   - 회원 서비스 
   

   - 회원 서비스 인터페이스


   코드5


   - 회원 서비스 구현체


   코드6


   - 회원 도메인 실행과 테스트


   - 회원 도메인 - 회원 가입 main


   코드7


   애플리케이션 로직으로 이렇게 테스트 하는 것은 좋은 방법 아님. JUnit 테스트를 사용하는게 좋다.


   - 회원 도메인 - 회원 가입 테스트


   코드8


   - 회원 도메인 설계의 문제점
      - 다른 저장소로 변경할 때 OCP, DIP 원칙을 지키지 않았다.
      - 의존관계가 인터페이스 뿐만 아니라 구현까지 모두 의존하는 문제점이 있다.


   - 주문과 할인 도메인 설계

   - 주문과 할인 정책
      - 회원은 상품을 주문할 수 있다.
      - 회원 등급에 따라 할인 정책 적용
      - 할인 정책은 모든 VIP는 1000원 할인해주는 고정 금액 할인을 적용(나중에 변경 될 수도 있음)
      - 할인 정책은 병경 가능성 높음 기본 할인 정책을 아직 미정, 최악의 경우 할인 적용 X(미확정)


   - 주문 도메인 협력, 역할, 책임

   
   사진4


   1. 주문 생성: 클라이언트는 주문 서비스에 주문 생성을 요청
   2. 회원 조회: 할인을 위해서는 회원 등급이 필요 그래서 주문 서비스는 회원 저장소에서 회원을 조회한다.
   3. 할인 적용: 주문 서비스는 회원 등급에 따른 할인 여부를 할인 정책에 위임한다.
   4. 주문 결과 반환: 주문 서비스는 할인 결과를 포함한 주문 결과를 반환


   - 주문 도메인 전체


   사진5


   - 역할과 구현을 분리해서 자유롭게 구현 객체를 조립할 수 있게 설계함.
   - 덕분에 회원 저장소, 할인 정책을 유연하게 변경할 수 있다.


   - 주문 도메인 클래스 다이어그램


   사진6


   - 주문 도메인 객체 다이어그램1


   사진7


   - 회원 메모리에서 조회하고, 정액 할인 정책을 지원해도 주문 서비스를 변경하지 않아도 됨.
   - 역할들의 협력 관계를 그대로 재사용 가능.


   - 주문 도메인 객체 다이어그램2


   사진8


   - 회원을 메모리가 아닌 실제 DB에서 조회, 정률 할인 정책을 지원해도 주문 서비스를 변경 안해도 됨.
   - 협력 관계를 그대로 재사용 가능하다.


   - 주문과 할인 도메인 개발


   - 할인 정책 인터페이스


   코드9


   - 정액 할인 정책 구현체


   코드10


   - VIP면 1000원을 할인하고, VIP가 아니면 할인 없다.


   - 주문 엔티티


   코드11


   - 주문 서비스 인터페이스


   코드12


   - 주문 서비스 구현체


   코드13


   - 주문 생성 요청이 오면, 회원 정보를 조회하고, 할인 정책을 적용한 다음 주문 객체를 생성해서 반환함.
   - 메모리 회원 리파지토리와 고정 금액 할인 정책을 구현체로 생성.


   - 주문과 할인 도메인 실행과 테스트


   - 주문과 할인 정책 실행


   코드14


   - 결과


   코드15


   - 할인 금액이 잘 출력됨
   - 애플리케이션 로직으로 이렇게 테스트 하는 것은 좋은 방법 아님. JUnit 테스트를 사용하는게 좋다.


   - 주문과 할인 정책 테스트


   코드16


   































